// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BFFService_Upload_FullMethodName   = "/proto.BFFService/Upload"
	BFFService_Download_FullMethodName = "/proto.BFFService/Download"
	BFFService_Delete_FullMethodName   = "/proto.BFFService/Delete"
)

// BFFServiceClient is the client API for BFFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BFFServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (BFFService_UploadClient, error)
	Download(ctx context.Context, in *Download_Request, opts ...grpc.CallOption) (BFFService_DownloadClient, error)
	Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error)
}

type bFFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBFFServiceClient(cc grpc.ClientConnInterface) BFFServiceClient {
	return &bFFServiceClient{cc}
}

func (c *bFFServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (BFFService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BFFService_ServiceDesc.Streams[0], BFFService_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bFFServiceUploadClient{stream}
	return x, nil
}

type BFFService_UploadClient interface {
	Send(*Upload_Request) error
	CloseAndRecv() (*Upload_Response, error)
	grpc.ClientStream
}

type bFFServiceUploadClient struct {
	grpc.ClientStream
}

func (x *bFFServiceUploadClient) Send(m *Upload_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bFFServiceUploadClient) CloseAndRecv() (*Upload_Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Upload_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bFFServiceClient) Download(ctx context.Context, in *Download_Request, opts ...grpc.CallOption) (BFFService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BFFService_ServiceDesc.Streams[1], BFFService_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bFFServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BFFService_DownloadClient interface {
	Recv() (*Download_Response, error)
	grpc.ClientStream
}

type bFFServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *bFFServiceDownloadClient) Recv() (*Download_Response, error) {
	m := new(Download_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bFFServiceClient) Delete(ctx context.Context, in *Delete_Request, opts ...grpc.CallOption) (*Delete_Response, error) {
	out := new(Delete_Response)
	err := c.cc.Invoke(ctx, BFFService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BFFServiceServer is the server API for BFFService service.
// All implementations must embed UnimplementedBFFServiceServer
// for forward compatibility
type BFFServiceServer interface {
	Upload(BFFService_UploadServer) error
	Download(*Download_Request, BFFService_DownloadServer) error
	Delete(context.Context, *Delete_Request) (*Delete_Response, error)
	mustEmbedUnimplementedBFFServiceServer()
}

// UnimplementedBFFServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBFFServiceServer struct {
}

func (UnimplementedBFFServiceServer) Upload(BFFService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedBFFServiceServer) Download(*Download_Request, BFFService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedBFFServiceServer) Delete(context.Context, *Delete_Request) (*Delete_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBFFServiceServer) mustEmbedUnimplementedBFFServiceServer() {}

// UnsafeBFFServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BFFServiceServer will
// result in compilation errors.
type UnsafeBFFServiceServer interface {
	mustEmbedUnimplementedBFFServiceServer()
}

func RegisterBFFServiceServer(s grpc.ServiceRegistrar, srv BFFServiceServer) {
	s.RegisterService(&BFFService_ServiceDesc, srv)
}

func _BFFService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BFFServiceServer).Upload(&bFFServiceUploadServer{stream})
}

type BFFService_UploadServer interface {
	SendAndClose(*Upload_Response) error
	Recv() (*Upload_Request, error)
	grpc.ServerStream
}

type bFFServiceUploadServer struct {
	grpc.ServerStream
}

func (x *bFFServiceUploadServer) SendAndClose(m *Upload_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bFFServiceUploadServer) Recv() (*Upload_Request, error) {
	m := new(Upload_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BFFService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Download_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BFFServiceServer).Download(m, &bFFServiceDownloadServer{stream})
}

type BFFService_DownloadServer interface {
	Send(*Download_Response) error
	grpc.ServerStream
}

type bFFServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *bFFServiceDownloadServer) Send(m *Download_Response) error {
	return x.ServerStream.SendMsg(m)
}

func _BFFService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFFServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BFFService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFFServiceServer).Delete(ctx, req.(*Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BFFService_ServiceDesc is the grpc.ServiceDesc for BFFService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BFFService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BFFService",
	HandlerType: (*BFFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _BFFService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _BFFService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _BFFService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
